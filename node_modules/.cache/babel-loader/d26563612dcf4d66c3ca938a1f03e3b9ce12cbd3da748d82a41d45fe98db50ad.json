{"ast":null,"code":"import _slicedToArray from\"C:/Users/rafi3/OneDrive/Desktop/Rafi-portfolio/rafi-portfolio/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{useState}from\"react\";export var useLocalStorage=function useLocalStorage(key,initialValue){// State to store our value\n// Pass initial state function to useState so logic is only executed once\nvar _useState=useState(function(){try{// Get from local storage by key\nvar item=window.localStorage.getItem(key);// Parse stored json or if none return initialValue\nreturn item?JSON.parse(item):initialValue;}catch(error){// If error also return initialValue\nconsole.log(error);return initialValue;}}),_useState2=_slicedToArray(_useState,2),storedValue=_useState2[0],setStoredValue=_useState2[1];// Return a wrapped version of useState's setter function that ...\n// ... persists the new value to localStorage.\nvar setValue=function setValue(value){try{// Allow value to be a function so we have same API as useState\nvar valueToStore=value instanceof Function?value(storedValue):value;// Save state\nsetStoredValue(valueToStore);// Save to local storage\nwindow.localStorage.setItem(key,JSON.stringify(valueToStore));}catch(error){// A more advanced implementation would handle the error case\nconsole.log(error);}};return[storedValue,setValue];};","map":{"version":3,"names":["useState","useLocalStorage","key","initialValue","_useState","item","window","localStorage","getItem","JSON","parse","error","console","log","_useState2","_slicedToArray","storedValue","setStoredValue","setValue","value","valueToStore","Function","setItem","stringify"],"sources":["C:/Users/rafi3/OneDrive/Desktop/Rafi-portfolio/rafi-portfolio/src/hooks/useLocalStorage.js"],"sourcesContent":["import {useState} from \"react\";\n\nexport const useLocalStorage = (key, initialValue) => {\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key);\n      // Parse stored json or if none return initialValue\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      // If error also return initialValue\n      console.log(error);\n      return initialValue;\n    }\n  });\n\n  // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n  const setValue = value => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore =\n        value instanceof Function ? value(storedValue) : value;\n      // Save state\n      setStoredValue(valueToStore);\n      // Save to local storage\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n\n  return [storedValue, setValue];\n};\n"],"mappings":"mJAAA,OAAQA,QAAQ,KAAO,OAAO,CAE9B,MAAO,IAAM,CAAAC,eAAe,CAAG,QAAlB,CAAAA,eAAeA,CAAIC,GAAG,CAAEC,YAAY,CAAK,CACpD;AACA;AACA,IAAAC,SAAA,CAAsCJ,QAAQ,CAAC,UAAM,CACnD,GAAI,CACF;AACA,GAAM,CAAAK,IAAI,CAAGC,MAAM,CAACC,YAAY,CAACC,OAAO,CAACN,GAAG,CAAC,CAC7C;AACA,MAAO,CAAAG,IAAI,CAAGI,IAAI,CAACC,KAAK,CAACL,IAAI,CAAC,CAAGF,YAAY,CAC/C,CAAE,MAAOQ,KAAK,CAAE,CACd;AACAC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC,CAClB,MAAO,CAAAR,YAAY,CACrB,CACF,CAAC,CAAC,CAAAW,UAAA,CAAAC,cAAA,CAAAX,SAAA,IAXKY,WAAW,CAAAF,UAAA,IAAEG,cAAc,CAAAH,UAAA,IAalC;AACA;AACA,GAAM,CAAAI,QAAQ,CAAG,QAAX,CAAAA,QAAQA,CAAGC,KAAK,CAAI,CACxB,GAAI,CACF;AACA,GAAM,CAAAC,YAAY,CAChBD,KAAK,WAAY,CAAAE,QAAQ,CAAGF,KAAK,CAACH,WAAW,CAAC,CAAGG,KAAK,CACxD;AACAF,cAAc,CAACG,YAAY,CAAC,CAC5B;AACAd,MAAM,CAACC,YAAY,CAACe,OAAO,CAACpB,GAAG,CAAEO,IAAI,CAACc,SAAS,CAACH,YAAY,CAAC,CAAC,CAChE,CAAE,MAAOT,KAAK,CAAE,CACd;AACAC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC,CACpB,CACF,CAAC,CAED,MAAO,CAACK,WAAW,CAAEE,QAAQ,CAAC,CAChC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}